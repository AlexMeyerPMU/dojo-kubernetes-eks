# Example GitHub Actions Workflow using Self-Hosted Kubernetes Runners
# 
# To use this workflow:
# 1. Copy this file to .github/workflows/ in your repository
# 2. Commit and push
# 3. The workflow will run on your Kubernetes runners

name: Self-Hosted Runner Demo

# Trigger on push to any branch and on pull requests
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Job 1: Simple test
  basic-test:
    name: Basic Runner Test
    runs-on: [self-hosted, kubernetes]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Runner information
        run: |
          echo "ðŸš€ Running on self-hosted Kubernetes runner!"
          echo "Runner name: ${{ runner.name }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner arch: ${{ runner.arch }}"
          echo ""
          echo "System information:"
          uname -a
          echo ""
          echo "Available memory:"
          free -h
          echo ""
          echo "Available disk space:"
          df -h /
      
      - name: Check installed tools
        run: |
          echo "Checking available tools:"
          echo "Git: $(git --version)"
          echo "Docker: $(docker --version || echo 'not available')"
          echo "kubectl: $(kubectl version --client --short || echo 'not available')"
          echo "helm: $(helm version --short || echo 'not available')"

  # Job 2: Docker build test (requires dockerdWithinRunnerContainer: true)
  docker-build:
    name: Docker Build Test
    runs-on: [self-hosted, kubernetes]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Docker image
        run: |
          echo "Building a test Docker image..."
          cat > Dockerfile.test << 'EOF'
          FROM alpine:latest
          RUN echo "Hello from Kubernetes runner!" > /hello.txt
          CMD cat /hello.txt
          EOF
          
          docker build -f Dockerfile.test -t test-image:latest .
          docker run --rm test-image:latest
          
          # Cleanup
          docker rmi test-image:latest
          rm Dockerfile.test

  # Job 3: Kubernetes interaction (if kubectl is configured)
  kubernetes-info:
    name: Kubernetes Cluster Info
    runs-on: [self-hosted, kubernetes]
    
    steps:
      - name: Get cluster info
        run: |
          echo "Kubernetes cluster information:"
          kubectl cluster-info || echo "kubectl not configured"
          echo ""
          echo "Current namespace:"
          kubectl config view --minify -o jsonpath='{..namespace}' || echo "Not available"
          echo ""
          echo "Available nodes:"
          kubectl get nodes -o wide || echo "No access to nodes"

  # Job 4: Multi-language build example
  multi-language-test:
    name: Multi-Language Test
    runs-on: [self-hosted, kubernetes]
    
    strategy:
      matrix:
        language: [python, node, go]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Go
        if: matrix.language == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      
      - name: Test ${{ matrix.language }}
        run: |
          case "${{ matrix.language }}" in
            python)
              python --version
              pip --version
              echo "print('Hello from Python on K8s!')" | python
              ;;
            node)
              node --version
              npm --version
              echo "console.log('Hello from Node.js on K8s!');" | node
              ;;
            go)
              go version
              echo 'package main; import "fmt"; func main() { fmt.Println("Hello from Go on K8s!") }' > /tmp/test.go
              go run /tmp/test.go
              ;;
          esac

  # Job 5: Performance test
  performance-test:
    name: Runner Performance Test
    runs-on: [self-hosted, kubernetes]
    
    steps:
      - name: CPU test
        run: |
          echo "Testing CPU performance..."
          time bash -c 'for i in {1..1000000}; do echo $i > /dev/null; done'
      
      - name: Disk I/O test
        run: |
          echo "Testing disk I/O..."
          dd if=/dev/zero of=/tmp/testfile bs=1M count=100 2>&1 | grep copied
          rm /tmp/testfile
      
      - name: Network test
        run: |
          echo "Testing network connectivity..."
          ping -c 4 google.com || echo "Ping failed"
          curl -s -o /dev/null -w "Download speed: %{speed_download} bytes/sec\n" https://google.com

  # Job 6: Parallel execution test
  parallel-test:
    name: Parallel Execution Test
    runs-on: [self-hosted, kubernetes]
    
    strategy:
      matrix:
        task: [1, 2, 3, 4, 5]
    
    steps:
      - name: Run parallel task ${{ matrix.task }}
        run: |
          echo "Running task ${{ matrix.task }} on runner: ${{ runner.name }}"
          sleep 5
          echo "Task ${{ matrix.task }} completed!"

  # Final summary job
  summary:
    name: Workflow Summary
    runs-on: [self-hosted, kubernetes]
    needs: [basic-test, docker-build, kubernetes-info, multi-language-test, performance-test, parallel-test]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "ðŸŽ‰ Workflow execution completed!"
          echo ""
          echo "Job results:"
          echo "  basic-test: ${{ needs.basic-test.result }}"
          echo "  docker-build: ${{ needs.docker-build.result }}"
          echo "  kubernetes-info: ${{ needs.kubernetes-info.result }}"
          echo "  multi-language-test: ${{ needs.multi-language-test.result }}"
          echo "  performance-test: ${{ needs.performance-test.result }}"
          echo "  parallel-test: ${{ needs.parallel-test.result }}"
          echo ""
          echo "All tests ran on self-hosted Kubernetes runners! âœ…"
